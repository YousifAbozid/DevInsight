import { useState, useRef } from 'react';
import { ContributionData } from '../services/githubGraphQLService';
import { Icons } from './shared/Icons';
import SectionHeader from './shared/SectionHeader';
import FilterTabs, { FilterTab } from './shared/FilterTabs';
import PersonalizedSummarySkeleton from './shared/Skeletons/PersonalizedSummarySkeleton';
import {
  useGithubInsights,
  Insight,
  getProfileLevel,
} from '../hooks/useGithubInsights';

// Define proper interfaces
interface PersonalizedSummaryProps {
  user: GithubUser;
  repositories?: Repository[];
  contributionData?: ContributionData;
  loading: boolean;
}

// Category configuration
const categoryInfo = {
  activity: {
    title: 'Activity',
    icon: Icons.Activity,
    description: 'Insights about your GitHub activity patterns',
  },
  languages: {
    title: 'Languages',
    icon: Icons.Code,
    description: 'Findings related to your programming languages',
  },
  repositories: {
    title: 'Repositories',
    icon: Icons.Repo,
    description: 'Information about your GitHub repositories',
  },
  impact: {
    title: 'Impact',
    icon: Icons.Star,
    description: 'Your influence in the developer community',
  },
  personal: {
    title: 'Profile',
    icon: Icons.User,
    description: 'Personal milestones and account information',
  },
};

// Main component with improved structure
export default function PersonalizedSummary({
  user,
  repositories,
  contributionData,
  loading,
}: PersonalizedSummaryProps) {
  const [expanded, setExpanded] = useState(false);
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const filterScrollRef = useRef<HTMLDivElement>(null);

  // Ensure hooks are always called in the same order
  const insights = useGithubInsights(
    user,
    repositories || [],
    contributionData
  );

  if (loading) {
    return <PersonalizedSummarySkeleton />;
  }

  if (!repositories || !repositories.length) {
    return null;
  }

  // Group insights by category
  const insightsByCategory = insights.reduce(
    (acc, insight) => {
      if (!acc[insight.category]) {
        acc[insight.category] = [];
      }
      acc[insight.category].push(insight);
      return acc;
    },
    {} as Record<string, Insight[]>
  );

  // Display insights based on active category
  const displayInsights = activeCategory
    ? insights.filter(insight => insight.category === activeCategory)
    : insights;

  // Select a subset of insights to display initially if using the default view
  const initialInsights = !activeCategory
    ? displayInsights.slice(0, 3)
    : displayInsights;
  const expandedInsights = !activeCategory ? displayInsights.slice(3) : [];
  const hasMoreInsights = expandedInsights.length > 0;

  const profileLevel = getProfileLevel(user, repositories, contributionData);

  const filterTabs: FilterTab[] = [
    {
      id: null,
      label: `All Insights (${insights.length})`,
      active: activeCategory === null,
      icon: Icons.Award,
      onClick: () => setActiveCategory(null),
    },
    ...Object.entries(insightsByCategory).map(
      ([category, categoryInsights]) => ({
        id: category,
        label: `${categoryInfo[category as keyof typeof categoryInfo]?.title || category} (${categoryInsights.length})`,
        active: activeCategory === category,
        onClick: () => {
          setActiveCategory(category);
          setExpanded(false);
        },
        icon: categoryInfo[category as keyof typeof categoryInfo]?.icon,
      })
    ),
  ];

  return (
    <div className="bg-l-bg-2 dark:bg-d-bg-2 rounded-lg p-3 sm:p-5 border border-border-l dark:border-border-d shadow-sm">
      <SectionHeader
        title="Your GitHub Story"
        subtitle="Insights from your developer journey"
        icon={Icons.Award}
        infoTooltip="Your GitHub Story provides personalized insights about your coding patterns, achievements, and milestones. These insights are generated by analyzing your repositories, contributions, and GitHub history."
        rightControls={
          <span className="px-3 py-1 text-xs rounded-full bg-accent-1/15 text-accent-1 font-medium">
            {profileLevel}
          </span>
        }
      />

      <FilterTabs
        tabs={filterTabs}
        activeTabId={activeCategory}
        scrollRef={filterScrollRef as React.RefObject<HTMLDivElement>}
      />

      {/* Display insights */}
      <div className="space-y-2.5">
        {initialInsights.map(insight => (
          <InsightCard key={insight.id} insight={insight} />
        ))}

        {/* Expanded insights with transition */}
        <div
          className={`space-y-2.5 overflow-hidden transition-all duration-300 ease-in-out ${
            expanded ? 'max-h-[2000px] opacity-100' : 'max-h-0 opacity-0'
          }`}
        >
          {expandedInsights.map(insight => (
            <InsightCard key={insight.id} insight={insight} />
          ))}
        </div>

        {/* Show more/less button - only show when not filtering */}
        {hasMoreInsights && !activeCategory && (
          <button
            onClick={() => setExpanded(!expanded)}
            className="w-full py-2 px-4 mt-1 text-xs sm:text-sm border border-border-l dark:border-border-d rounded-md bg-l-bg-1 dark:bg-d-bg-1 text-accent-1 hover:bg-l-bg-hover dark:hover:bg-d-bg-hover hover:border-accent-1/30 transition-all duration-300 flex items-center justify-center gap-2 group cursor-pointer"
          >
            {expanded ? (
              <>
                <Icons.ChevronUp className="w-4 h-4 group-hover:animate-bounce-short" />
                <span>Show less</span>
              </>
            ) : (
              <>
                <Icons.ChevronDown className="w-4 h-4 group-hover:animate-pulse" />
                <span>Show {expandedInsights.length} more</span>
              </>
            )}
          </button>
        )}

        {/* No insights message */}
        {activeCategory && displayInsights.length === 0 && (
          <div className="text-center py-8 bg-l-bg-1 dark:bg-d-bg-1 rounded-lg border border-border-l dark:border-border-d">
            <div className="mb-3 inline-block p-3 rounded-full bg-l-bg-3/30 dark:bg-d-bg-3/30">
              <Icons.Search className="w-8 h-8 text-l-text-3 dark:text-d-text-3" />
            </div>
            <h3 className="text-base font-semibold text-l-text-1 dark:text-d-text-1 mb-1">
              No insights found
            </h3>
            <p className="text-sm text-l-text-2 dark:text-d-text-2 max-w-md mx-auto mb-3">
              Try selecting a different category
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

// Extracted insight card component for better organization
function InsightCard({ insight }: { insight: Insight }) {
  return (
    <div className="flex items-start gap-2.5 p-3 rounded-lg bg-l-bg-1 dark:bg-d-bg-1 border border-border-l dark:border-border-d hover:bg-l-bg-hover dark:hover:bg-d-bg-hover transition-colors">
      <div className={`p-2 rounded-full ${insight.iconBg} shrink-0 mt-0.5`}>
        <insight.icon className="w-3.5 h-3.5 text-l-text-inv dark:text-d-text-inv" />
      </div>
      <div className="min-w-0 flex-1">
        <p className="text-sm font-medium text-l-text-1 dark:text-d-text-1 leading-tight">
          {insight.text}
        </p>
        {insight.subtext && (
          <p className="text-xs text-l-text-3 dark:text-d-text-3 mt-1 leading-relaxed">
            {insight.subtext}
          </p>
        )}
      </div>
    </div>
  );
}
